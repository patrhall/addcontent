using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Data;
using System.Data.OleDb;
using AIM.Base.Modules.Page.AimBusiness.ModulSystem.Website;
using AIM.Business.AimBusiness.ModulSystem.Website;

namespace AimBusiness.Customers.ModulSystem.Website
{
    public partial class Upload : AIM.Base.Modules.Page.AimBusiness.ModulSystem.Website.AimBusiness
    {
        public class ArticleGroupContainer
        {
            public int ArticleGroupId { get; set; }
            public string ArticleGroupName { get; set; }
            public int ArticleSubGroupId { get; set; }
            public string ArticleSubGroupName { get; set; }
        }

        private const string ExcelSheetName = "Blad1";

        private const string DefaultLanguage = "EN";
        private const string ColumnDefaultLanguageArticleGroup = ColumnProductGroup + DefaultLanguage;
        private const string ColumnDefaultLanguageArticleSubGroup = ColumnHeadLine + DefaultLanguage;
        private const string ColumnDefaultLanguageDimension = ColumnDimension + DefaultLanguage;
        private const string ColumnProductGroup = "Product group ";
        private const string ColumnHeadLine = "Product ";
        private const string ColumnProductName = "Product name ";
        private const string ColumnDescription = "Description ";
        private const string ColumnExklude = "Untanta från";
        private const string ColumnArtNr = "ArtNo";
        private const string ColumnRelation = "Relation ";
        private const string ColumnAccesories = "Rec accessories ";
        private const string ColumnImage = "Image";
        private const string ColumnWidth = "Width";
        private const string ColumnDepth = "Depth";
        private const string ColumnHeight = "Height";
        private const string ColumnWeight = "Weight";
        private const string ColumnIsPublc = "Visa";
        private const string ColumnSort = "Sortering";
        private const string ColumnInstallationInstructionName = "Assenbly instruction";
        private const string ColumnDimension = "Dimensions ";
        private const string ColumnPreviewImageName = "Image";
        private const string ColumnProductGroupUrl = "Product Group Url";

        private string ImportFileName { get; set; }
        private DataTable Data { get; set; }
        private List<ArticleGroupContainer> ArticleGroups { get; set; }                
        private Dictionary<string, int> Dimensions { get; set; }
        private Dictionary<string, int> LanguagesIds { get; set; }
        private Dictionary<string, int> Articles { get; set; }
        private List<string> Log { get; set; }

        protected override void Page_Load()
        {

            lblMsg.Text = String.Empty;
        }

        protected void btnImport_Click(object sender, EventArgs e)
        {
            if (!fuExcel.HasFile || Path.GetExtension(fuExcel.FileName) != ".xlsx")
            {
                lblMsg.Text = "The file uploaded needs to be a xlsx-file";
                return;
            }

            ArticleGroups = new List<ArticleGroupContainer>();            
            Dimensions = new Dictionary<string, int>();
            LanguagesIds = new Dictionary<string, int>();
            Articles = new Dictionary<string, int>();
            Log = new List<string>();

            saveFile();
            getData();
            clearDb();
            importData();

            if (Log.Count == 0)
                lblMsg.Text = "The import has finished with success";
            else
            {
                lblMsg.Text = "The import has finished, but with errors:<br />";

                foreach (var logItem in Log.Distinct())
                    lblMsg.Text += logItem + "<br />";
            }
        }

        private void clearDb()
        {
            //Dont clear db.Languages!!
            db.Article_X_LanguageExcludes.DeleteAllOnSubmit(db.Article_X_LanguageExcludes);
            db.Article_X_Languages.DeleteAllOnSubmit(db.Article_X_Languages);
            db.ArticleGroup_X_Languages.DeleteAllOnSubmit(db.ArticleGroup_X_Languages);
            db.Dimension_X_Languages.DeleteAllOnSubmit(db.Dimension_X_Languages);
            db.ArticleRelations.DeleteAllOnSubmit(db.ArticleRelations);            
            db.Articles.DeleteAllOnSubmit(db.Articles);
            db.ArticleGroups.DeleteAllOnSubmit(db.ArticleGroups);

            db.Dimensions.DeleteAllOnSubmit(db.Dimensions);
            db.SubmitChanges();
        }

        private void saveFile()
        {
            ImportFileName = Server.MapPath("~/import.xlsx");

            if (File.Exists(ImportFileName))
                File.Delete(ImportFileName);

            fuExcel.PostedFile.SaveAs(ImportFileName);
        }
        private void getData()
        {
            Excel excel = new Excel();
            DataSet ds = excel.getDataSet(ImportFileName, ExcelSheetName);

            Data = ds.Tables[0];

            foreach (var language in db.Languages)
            {
                LanguagesIds.Add(language.Language1, language.Id);
            }
        }

        private void importData()
        {
            foreach (DataRow d in Data.Rows)
            {
                try
                {
                    int articleSubGroupId, dimensionId;

                    if (ArticleGroups.Any(p => p.ArticleSubGroupName == d[ColumnDefaultLanguageArticleSubGroup].ToString() && p.ArticleGroupName == d[ColumnDefaultLanguageArticleGroup].ToString()))
                        articleSubGroupId = ArticleGroups.Single(p => p.ArticleSubGroupName == d[ColumnDefaultLanguageArticleSubGroup].ToString() && p.ArticleGroupName == d[ColumnDefaultLanguageArticleGroup].ToString()).ArticleSubGroupId;
                    else
                    {
                        ArticleGroupContainer articleGroupContainer = new ArticleGroupContainer();

                        if (ArticleGroups.Any(p => p.ArticleGroupName == d[ColumnDefaultLanguageArticleGroup].ToString()))
                        {
                            var oldItem =ArticleGroups.First(p => p.ArticleGroupName == d[ColumnDefaultLanguageArticleGroup].ToString());

                            articleGroupContainer.ArticleGroupId = oldItem.ArticleGroupId;
                            articleGroupContainer.ArticleGroupName = oldItem.ArticleGroupName;
                        }                            
                        else
                        {
                            AIM.Business.AimBusiness.ModulSystem.Website.ArticleGroup aGroup = new AIM.Business.AimBusiness.ModulSystem.Website.ArticleGroup();
                            aGroup.ArticleGroup_FK = null;
                            aGroup.Url = d[ColumnProductGroupUrl].ToString().ToLower();
                            db.ArticleGroups.InsertOnSubmit(aGroup);
                            db.SubmitChanges();                            

                            articleGroupContainer.ArticleGroupId = aGroup.Id;
                            articleGroupContainer.ArticleGroupName = d[ColumnDefaultLanguageArticleGroup].ToString();                            

                            foreach (string language in LanguagesIds.Keys)
                                createArticleGroupLanguage(aGroup.Id, language, d[ColumnProductGroup + language].ToString());
                        }

                        AIM.Business.AimBusiness.ModulSystem.Website.ArticleGroup subGroup = new AIM.Business.AimBusiness.ModulSystem.Website.ArticleGroup();
                        subGroup.ArticleGroup_FK = articleGroupContainer.ArticleGroupId;
                        db.ArticleGroups.InsertOnSubmit(subGroup);
                        db.SubmitChanges();

                        articleGroupContainer.ArticleSubGroupId = subGroup.Id;
                        articleGroupContainer.ArticleSubGroupName = d[ColumnDefaultLanguageArticleSubGroup].ToString();                        

                        ArticleGroups.Add(articleGroupContainer);

                        articleSubGroupId = subGroup.Id;

                        foreach (string language in LanguagesIds.Keys)
                            createArticleGroupLanguage(subGroup.Id, language, d[ColumnHeadLine + language].ToString());
                    }


                    if (Dimensions.ContainsKey(d[ColumnDefaultLanguageDimension].ToString()))
                        dimensionId = Dimensions[d[ColumnDefaultLanguageDimension].ToString()];
                    else
                    {
                        AIM.Business.AimBusiness.ModulSystem.Website.Dimension dim = new AIM.Business.AimBusiness.ModulSystem.Website.Dimension();
                        db.Dimensions.InsertOnSubmit(dim);
                        db.SubmitChanges();

                        dimensionId = dim.Id;

                        Dimensions.Add(d[ColumnDefaultLanguageDimension].ToString(), dimensionId);

                        foreach (string language in LanguagesIds.Keys)
                            createDimensionLanguage(dim.Id, language, d[ColumnDimension + language].ToString());
                    }

                    int articleId = createArticle(d, articleSubGroupId, dimensionId);

                    foreach (string language in LanguagesIds.Keys)
                        createArticleLanguage(articleId, language, d[ColumnProductName + language].ToString(), d[ColumnDescription + language].ToString());

                    createLangExclude(articleId, d[ColumnExklude].ToString());
                }
                catch //(Exception ex)
                {
                    log("Article " + d[ColumnArtNr].ToString() + ": The article was not added");
                    //log("Exception: " + ex.Message + ex.StackTrace + "<br /> <br />");
                }
            }

            //Relations can only be created after all articles
            foreach (DataRow d in Data.Rows)
            {
                try
                {
                    for (int i = 1; i <= 10; i++)
                        createRelation(d[ColumnArtNr].ToString(), true, i, d[ColumnRelation + i].ToString());

                    for (int i = 1; i <= 9; i++)
                        createRelation(d[ColumnArtNr].ToString(), false, i, d[ColumnAccesories + i].ToString());
                }
                catch
                {
                    log("Article " + d[ColumnArtNr].ToString() + ": Adding relations failed");
                }
            }
        }

        private int createArticle(DataRow d, int articleSubGroupId, int dimensionId)
        {
            AIM.Business.AimBusiness.ModulSystem.Website.Article article = new AIM.Business.AimBusiness.ModulSystem.Website.Article();
            article.ArticleGroup_FK = articleSubGroupId;
            article.Dimension_FK = dimensionId;
            article.ArticleNumber = d[ColumnArtNr].ToString();
            article.ImageName = d[ColumnImage].ToString();
            article.Width = d[ColumnWidth].ToString();
            article.Depth = d[ColumnDepth].ToString();
            article.Height = d[ColumnHeight].ToString();
            article.Weight = d[ColumnWeight].ToString();
            article.IsPublic = (d[ColumnIsPublc].ToString().ToLower() == "x");
            article.SortOrder = Convert.ToInt32(d[ColumnSort]);
            article.InstallationInstructionName = d[ColumnInstallationInstructionName].ToString();
            article.PreviewImageName = d[ColumnPreviewImageName].ToString();

            db.Articles.InsertOnSubmit(article);

            db.SubmitChanges();

            Articles.Add(article.ArticleNumber, article.Id);

            return article.Id;
        }

        private void createArticleGroupLanguage(int articleGroupId, string language, string name)
        {
            if (String.IsNullOrEmpty(name))
                return;

            AIM.Business.AimBusiness.ModulSystem.Website.ArticleGroup_X_Language ag_lang = new AIM.Business.AimBusiness.ModulSystem.Website.ArticleGroup_X_Language();
            ag_lang.ArticleGroup_FK = articleGroupId;
            ag_lang.Language_FK = LanguagesIds[language];
            ag_lang.GroupName = name;

            db.ArticleGroup_X_Languages.InsertOnSubmit(ag_lang);
            db.SubmitChanges();
        }

        private void createDimensionLanguage(int dimensionId, string language, string name)
        {
            if (String.IsNullOrEmpty(name))
                return;

            AIM.Business.AimBusiness.ModulSystem.Website.Dimension_X_Language dim_lang = new AIM.Business.AimBusiness.ModulSystem.Website.Dimension_X_Language();
            dim_lang.Dimension_FK = dimensionId;
            dim_lang.Language_FK = LanguagesIds[language];
            dim_lang.Name = name;

            db.Dimension_X_Languages.InsertOnSubmit(dim_lang);
            db.SubmitChanges();
        }

        private void createArticleLanguage(int articleId, string language, string name, string description)
        {
            if (String.IsNullOrEmpty(name))
                return;

            AIM.Business.AimBusiness.ModulSystem.Website.Article_X_Language x = new AIM.Business.AimBusiness.ModulSystem.Website.Article_X_Language();
            x.Article_FK = articleId;
            x.Language_FK = LanguagesIds[language];
            x.ArticleName = name;
            x.ArticleDescription = description;

            db.Article_X_Languages.InsertOnSubmit(x);
            db.SubmitChanges();
        }

        private void createRelation(string parentArticleNumber, bool isRelation, int placeholderId, string value)
        {
            int? articleId = null;
            string text = null;

            if (value == "-")
            {
                text = value;
            }
            else if (value.Contains("/"))
            {
                var articles = value.Split(new char[] { '/' });

                foreach (var article in articles)
                    createRelation(parentArticleNumber, isRelation, placeholderId, article.Trim());

                return;
            }
            else if (value.Contains("+"))
            {
                var articles = value.Split(new char[] { '+' });

                foreach (var article in articles)
                    createRelation(parentArticleNumber, isRelation, placeholderId, article.Trim());

                return;
            }
            else if (value.Trim().Length > 0)
            {
                if (Articles.ContainsKey(value.Trim()))
                    articleId = Articles[value.Trim()];
                else
                {
                    log(value + " not in articlelist");
                    return;
                }
            }
            else
                return;

            if (!Articles.ContainsKey(parentArticleNumber))
            {
                log(value + " not in articlelist");
                return;
            }

            AIM.Business.AimBusiness.ModulSystem.Website.ArticleRelation x = new AIM.Business.AimBusiness.ModulSystem.Website.ArticleRelation();
            x.ParentArticle_FK = Articles[parentArticleNumber];
            x.Article_FK = articleId;
            x.IsRelation = isRelation;
            x.PlaceHolderId = placeholderId;
            x.Text = text;

            db.ArticleRelations.InsertOnSubmit(x);
            db.SubmitChanges();
        }

        private void createLangExclude(int articleId, string value)
        {
            if (String.IsNullOrEmpty(value))
                return;

            if (value.Contains(","))
            {
                var exkl = value.Split(new char[] {','});

                foreach (var e in exkl)
                    createLangExclude(articleId, e.Trim());

                return;
            }

            if (LanguagesIds.ContainsKey(value))
            {
                AIM.Business.AimBusiness.ModulSystem.Website.Article_X_LanguageExclude x = new AIM.Business.AimBusiness.ModulSystem.Website.Article_X_LanguageExclude();
                x.Article_FK = articleId;
                x.Language_FK = LanguagesIds[value];

                db.Article_X_LanguageExcludes.InsertOnSubmit(x);
                db.SubmitChanges();
            }
        }

        private void log(string str)
        {
            Log.Add(str);
        }
    }
}